3.Doc-Special-Questions
-----------------------
-----------------------

B) Investion Problem: Finding all pairs where i < j & A[i] > A[j]
---------------------------------------------------------------------

// PENDING : NOT COMPLETED!!! :'(

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

class Pair {
	int i;
	int j;

	public Pair(int i, int j) {
		this.i = i;
		this.j = j;
	}
}

public class Inversion {
	
	public static void main(String[] args) {
		int[] input = {10,2,4,3,8,5}; // Actual Answer: (10, 2), (10, 4), (10, 3), (10, 8), (10, 5) / (4, 3) / (8, 5) - 7.
		int[] originalInput = Arrays.copyOf(input, input.length);

		List<Pair> result = new ArrayList<Pair>();
		Inversion i = new Inversion();
		i.sortWithInversion(input, result);
        System.out.print("Original Input: ");
        for(int val : originalInput) {
            System.out.print(val + "\t");
        }
        System.out.println();
        System.out.print("Sorted Output: ");
        for(int val : input) {
            System.out.print(val + "\t");
        }
        System.out.println();
		for(Pair p : result) {
			System.out.println("For pair (" + p.i + "," + p.j +") the value " + originalInput[p.i] + " is greater than " + originalInput[p.j]);
		}
	}

	public void sortWithInversion(int[] input,List<Pair> result) {
		mergeSort(input, 0, input.length - 1, result);
	}

	private void mergeSort(int[] input, int p, int r, List<Pair> result) {
		if(p < r) {
			int q = p + ((r - p)/2); // To avoid overflow
			mergeSort(input, p, q, result);
			mergeSort(input, q + 1, r, result);
			merging(input, p, q, r, result);
		}
	}

	private void merging(int[] input, int p, int q, int r, List<Pair> result) {
		int n1 = q - p + 1;
		int n2 = r - q;
		int[] left = new int[n1];
		int[] right = new int[n2];
		for(int i = 0; i < n1; i++) left[i] = input[p + i];
		for(int i = 0; i < n2; i++) right[i] = input[q + i + 1];
		int i = 0, j = 0;
		for(int k = p; k <=r; k++) {
			if(i >= left.length) {
				input[k] = right[j++];
                continue;
			}
			if(j >= right.length) {
				input[k] = left[i++];
                continue;
			}
			if(left[i] > right[j]) {
				input[k] = right[j];
                if(i != j)
				    result.add(new Pair(j, k));
				j++;
			} else {
				input[k] = left[i++];
			}
		}
	}
}

A) For a given array with 'n' values, find if there contains pair of numbers who sum is exactly 'x'
----------------------------------------------------------------------------------------------------

public class FindingPairs {
	
	public static void main(String[] args) {
		int[] input = {10,2,4,3,8,5,9,1,7,6};
		FindingPairs fp = new FindingPairs();
		fp.mergeSort(input);
		for(int i = 0; i < input.length; i++) {
			System.out.print(input[i] + "\t");
		}
		System.out.println("Does a pair of number exist with sum 13:" + fp.isPairExists(input, 13));
		System.out.println("Does a pair of number exist with sum 28:" + fp.isPairExists(input, 28));
	}

	public boolean isPairExists(int[] input, int exactSum) {
		int i = 0, j = input.length - 1;
		while(i < j) {
			int sum = input[i] + input[j];
			if(sum == exactSum) {
				return true;
			}
			if(sum < exactSum) {
				i++;
			} else {
				j--;
			}
		}
		return false;
	}

	public void mergeSort(int[] input) {
		sort(input, 0, input.length - 1);
	}

	private void sort(int[] input, int p, int r) {
		if(p < r) {
			int q = p + ((r - p)/2);
			sort(input, p, q);
			sort(input, q + 1, r);
			merge(input, p, q, r);
		}
	}

	private void merge(int[] input, int p, int q, int r) {
		int n1 = q - p + 1;
		int n2 = r - q;
		int[] left = new int[n1];
		int[] right = new int[n2];
		for(int i = 0; i < n1; i++) {
            left[i] = input[p + i];
        }
		for(int i = 0; i < n2; i++) {
            right[i] = input[q + i + 1];
        }
		int i = 0, j = 0;
		for(int k = p; k <= r; k++) {
			if(i >= left.length) {
				input[k] = right[j++];
				continue;
			}
			if(j >= right.length) {
				input[k] = left[i++];
				continue;
			}
			if(left[i] <= right[j]) {
				input[k] = left[i];
                i++;
			} else {
				input[k] = right[j];
                j++;
			}
		}
	}
}